openapi: 3.0.3
info:
  title: Task API
  version: 1.0.0
  description: API for managing users and orders
servers:
  - url: http://localhost:8000
    description: Local development server
paths:
  /v1/users/register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessUserResponse'
        '400':
          description: Validation error or email exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/users/login:
    post:
      summary: Login user and get JWT
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessUserResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/users/profile:
    get:
      summary: Get user profile
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessUserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update user profile
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessUserResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Invalid token or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/users:
    get:
      summary: Get list of users (admin only)
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of users per page
        - in: query
          name: role
          schema:
            type: string
            enum: [user, admin]
          description: Filter by role
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessUsersListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Invalid token or admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/users/{userId}:
    get:
      summary: Get user by ID (self or admin)
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
          required: true
          description: User ID
      responses:
        '200':
          description: User retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessUserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Invalid token or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update user by ID (self or admin)
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
          required: true
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessUserResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Invalid token or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete user by ID (self or admin)
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
          required: true
          description: User ID
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Invalid token or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/users/{userId}/details:
    get:
      summary: Get user details with orders (self or admin)
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
            format: uuid
          required: true
          description: User ID
      responses:
        '200':
          description: User details with orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessUserDetailsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Invalid token or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/orders:
    post:
      summary: Create a new order
      tags:
        - Orders
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessOrderResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Invalid token or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: Get list of orders
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of orders per page
        - in: query
          name: sort
          schema:
            type: string
            default: createdAt
          description: Sort field
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort order
        - in: query
          name: userId
          schema:
            type: string
            format: uuid
          description: Filter by user ID (admin only)
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessOrdersListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Invalid token or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/orders/{orderId}:
    get:
      summary: Get order by ID
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
            format: uuid
          required: true
          description: Order ID
      responses:
        '200':
          description: Order retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessOrderResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Invalid token or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update order by ID
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
            format: uuid
          required: true
          description: Order ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '200':
          description: Order updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessOrderResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Invalid token or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Cancel order by ID
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
            format: uuid
          required: true
          description: Order ID
      responses:
        '200':
          description: Order cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessageResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Invalid token or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/health:
    get:
      summary: Health check for API Gateway
      tags:
        - Health
      responses:
        '200':
          description: Gateway is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessHealthResponse'
  /v1/users/health:
    get:
      summary: Health check for Users Service
      tags:
        - Health
      responses:
        '200':
          description: Users service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessHealthResponse'
  /v1/orders/health:
    get:
      summary: Health check for Orders Service
      tags:
        - Health
      responses:
        '200':
          description: Orders service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessHealthResponse'
  /v1/status:
    get:
      summary: Status check for API Gateway
      tags:
        - Health
      responses:
        '200':
          description: Gateway status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessStatusResponse'
  /v1/users/status:
    get:
      summary: Status check for Users Service
      tags:
        - Health
      responses:
        '200':
          description: Users service status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessStatusResponse'
  /v1/orders/status:
    get:
      summary: Status check for Orders Service
      tags:
        - Health
      responses:
        '200':
          description: Orders service status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessStatusResponse'
components:
  schemas:
    RegisterRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        role:
          type: string
          enum: [user, admin]
          default: user
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        name:
          type: string
        roles:
          type: array
          items:
            type: string
            enum: [user, admin]
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        role:
          type: string
          enum: [user, admin]
        name:
          type: string
        roles:
          type: array
          items:
            type: string
            enum: [user, admin]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    SuccessUserResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/User'
    SuccessUsersListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'
            page:
              type: integer
            limit:
              type: integer
            total:
              type: integer
    CreateOrderRequest:
      type: object
      required: [userId, description, positions, total]
      properties:
        userId:
          type: string
          format: uuid
        description:
          type: string
          minLength: 1
        positions:
          type: array
          items:
            type: object
            required: [product, quantity]
            properties:
              product:
                type: string
                minLength: 1
              quantity:
                type: integer
                minimum: 1
        total:
          type: number
          minimum: 0
        status:
          type: string
          enum: [created, in_progress, completed, cancelled]
          default: created
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        description:
          type: string
        positions:
          type: array
          items:
            type: object
            properties:
              product:
                type: string
              quantity:
                type: integer
        total:
          type: number
        status:
          type: string
          enum: [created, in_progress, completed, cancelled]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    SuccessOrderResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/Order'
    SuccessOrdersListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            orders:
              type: array
              items:
                $ref: '#/components/schemas/Order'
            page:
              type: integer
            limit:
              type: integer
            total:
              type: integer
    SuccessUserDetailsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            orders:
              type: array
              items:
                $ref: '#/components/schemas/Order'
    SuccessMessageResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            message:
              type: string
              example: Resource deleted
    SuccessHealthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            status:
              type: string
              example: OK
            service:
              type: string
              example: API Gateway
            timestamp:
              type: string
              format: date-time
    SuccessStatusResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            status:
              type: string
              example: Service is running
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: VALIDATION_ERROR
            message:
              type: string
              example: Invalid input
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - BearerAuth: []